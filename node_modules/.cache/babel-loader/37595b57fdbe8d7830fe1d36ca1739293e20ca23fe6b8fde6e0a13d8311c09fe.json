{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_Authentication\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\n// calculate time to know the expiration time\n\n// helper function which gets called in login to check the time\n\nconst calculateRemainingTime = expirationTime => {\n  // get time in miliseconds using getTime() method of date function\n\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  // console.log(currentTime);\n  // console.log(adjExpirationTime);\n  // console.log(remainingDuration);\n  return remainingDuration;\n};\n\n// define the function and all to handle the data\n\n// another helper function to retrieve stored token\n// if time has expired then no use of token\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remaiiningTime = calculateRemainingTime(storedExpirationDate);\n  if (remaiiningTime <= 3600) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n  return {\n    token: storedToken,\n    duration: remaiiningTime\n  };\n};\nexport const AuthContextProvider = props => {\n  _s();\n  const tokenData = retrieveStoredToken();\n  let initialToken;\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n  // it is actually a javascriupt syntax to check true or false\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    // using local storage to store the token and expiration time\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n\n    // we have called the helper function to logout the sigin\n    // guy when the time gets over\n\n    const remaiiningTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remaiiningTime);\n\n    // we have clear the time what if somebody logout before session ends\n    // then we have clear the timer\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n\n  // returning the value\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return (\n    /*#__PURE__*/\n    // passing the data using value - contextvalue is object name\n    // and value containes the infomation about data\n    _jsxDEV(AuthContext.Provider, {\n      value: contextValue,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remaiiningTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","contextValue","children"],"sources":["D:/react_Authentication/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nlet logoutTimer;\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\n// calculate time to know the expiration time\r\n\r\n// helper function which gets called in login to check the time\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // get time in miliseconds using getTime() method of date function\r\n\r\n  const currentTime = new Date().getTime();\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n  // console.log(currentTime);\r\n  // console.log(adjExpirationTime);\r\n  // console.log(remainingDuration);\r\n  return remainingDuration;\r\n};\r\n\r\n// define the function and all to handle the data\r\n\r\n// another helper function to retrieve stored token\r\n// if time has expired then no use of token\r\n\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remaiiningTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n  if (remaiiningTime <= 3600) {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n  return {\r\n    token: storedToken,\r\n    duration: remaiiningTime,\r\n  };\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const tokenData = retrieveStoredToken();\r\n\r\n  let initialToken;\r\n  if (tokenData) {\r\n    initialToken = tokenData.token;\r\n  }\r\n\r\n  const [token, setToken] = useState(initialToken);\r\n  const userIsLoggedIn = !!token;\r\n   // it is actually a javascriupt syntax to check true or false\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationTime');\r\n\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    // using local storage to store the token and expiration time\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n\r\n\r\n    // we have called the helper function to logout the sigin\r\n    // guy when the time gets over\r\n\r\n\r\n    const remaiiningTime = calculateRemainingTime(expirationTime);\r\n    logoutTimer = setTimeout(logoutHandler, remaiiningTime);\r\n\r\n\r\n    // we have clear the time what if somebody logout before session ends\r\n    // then we have clear the timer\r\n  };\r\n\r\n  useEffect(()=>{\r\n    if(tokenData){\r\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration)\r\n    }\r\n  }, [tokenData])\r\n\r\n\r\n  // returning the value\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    // passing the data using value - contextvalue is object name\r\n    // and value containes the infomation about data\r\n\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}