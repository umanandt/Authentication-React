{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_Authentication\\\\01-starting-project\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthForm = () => {\n  _s();\n  const history = useHistory();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsloading] = useState(false);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsloading(true);\n    let url;\n    if (isLogin) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCh99fb68lWE88xr9v1ButOQH6kNesi3zI\";\n    } else {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCh99fb68lWE88xr9v1ButOQH6kNesi3zI\";\n    }\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsloading(false);\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          // show an error modal\n          // show some error message to users\n          let errorMessage = \"Authentication failed\";\n          if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          }\n          //  alert(errorMessage);\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      // providing the expiration time\n      const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000);\n      console.log(expirationTime);\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      // authCtx is the contextAPI which we created in store\n      // login is the function that we have defined \n      // data is the whole value and idToken is the value that we got from the\n      // srver or the firebase to use here\n      // if idToken is availble means login happend otherwise not\n      //using history from react router dom to redirect user after login\n      // with replace cannot use back button\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthForm, \"+NQpIouk44+bxvw++Z/Y4QAfaw4=\", false, function () {\n  return [useHistory];\n});\n_c = AuthForm;\nexport default AuthForm;\nvar _c;\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["useState","useRef","useContext","AuthContext","classes","useHistory","AuthForm","history","isLogin","setIsLogin","isLoading","setIsloading","emailInputRef","passwordInputRef","authCtx","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorMessage","error","message","Error","expirationTime","Date","getTime","expiresIn","console","log","login","idToken","toISOString","replace","catch","err","alert","auth","control","actions","toggle"],"sources":["D:/react_Authentication/01-starting-project/src/components/Auth/AuthForm.js"],"sourcesContent":["import { useState, useRef , useContext} from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { useHistory } from 'react-router-dom';\n\n\nconst AuthForm = () => {\n\n  const history = useHistory();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsloading] = useState(false);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n const authCtx  =  useContext(AuthContext);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsloading(true);\n    let url;\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCh99fb68lWE88xr9v1ButOQH6kNesi3zI\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCh99fb68lWE88xr9v1ButOQH6kNesi3zI\";\n    }\n    fetch(\nurl,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        setIsloading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            // show an error modal\n            // show some error message to users\n            let errorMessage = \"Authentication failed\";\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n          //  alert(errorMessage);\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        // providing the expiration time\n        const expirationTime = new Date(new Date().getTime() + (+data.expiresIn * 1000));\n        console.log(expirationTime);\n        authCtx.login(data.idToken, expirationTime.toISOString());\n        // authCtx is the contextAPI which we created in store\n        // login is the function that we have defined \n        // data is the whole value and idToken is the value that we got from the\n        // srver or the firebase to use here\n        // if idToken is availble means login happend otherwise not\n        //using history from react router dom to redirect user after login\n        // with replace cannot use back button\n        history.replace('/');\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}